'use strict';

module.exports = function (Chart) {

	var helpers = Chart.helpers;

	Chart.scaleService = {
		// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
		// use the new chart options to grab the correct scale
		constructors: {},
		// Use a registration function so that we can move to an ES6 map when we no longer need to support
		// old browsers

		// Scale config defaults
		defaults: {},
		registerScaleType: function registerScaleType(type, scaleConstructor, defaults) {
			this.constructors[type] = scaleConstructor;
			this.defaults[type] = helpers.clone(defaults);
		},
		getScaleConstructor: function getScaleConstructor(type) {
			return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
		},
		getScaleDefaults: function getScaleDefaults(type) {
			// Return the scale defaults merged with the global settings so that we always use the latest ones
			return this.defaults.hasOwnProperty(type) ? helpers.scaleMerge(Chart.defaults.scale, this.defaults[type]) : {};
		},
		updateScaleDefaults: function updateScaleDefaults(type, additions) {
			var defaults = this.defaults;
			if (defaults.hasOwnProperty(type)) {
				defaults[type] = helpers.extend(defaults[type], additions);
			}
		},
		addScalesToLayout: function addScalesToLayout(chartInstance) {
			// Adds each scale to the chart.boxes array to be sized accordingly
			helpers.each(chartInstance.scales, function (scale) {
				Chart.layoutService.addBox(chartInstance, scale);
			});
		}
	};
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUuc2NhbGVTZXJ2aWNlLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJDaGFydCIsImhlbHBlcnMiLCJzY2FsZVNlcnZpY2UiLCJjb25zdHJ1Y3RvcnMiLCJkZWZhdWx0cyIsInJlZ2lzdGVyU2NhbGVUeXBlIiwidHlwZSIsInNjYWxlQ29uc3RydWN0b3IiLCJjbG9uZSIsImdldFNjYWxlQ29uc3RydWN0b3IiLCJoYXNPd25Qcm9wZXJ0eSIsInVuZGVmaW5lZCIsImdldFNjYWxlRGVmYXVsdHMiLCJzY2FsZU1lcmdlIiwic2NhbGUiLCJ1cGRhdGVTY2FsZURlZmF1bHRzIiwiYWRkaXRpb25zIiwiZXh0ZW5kIiwiYWRkU2NhbGVzVG9MYXlvdXQiLCJjaGFydEluc3RhbmNlIiwiZWFjaCIsInNjYWxlcyIsImxheW91dFNlcnZpY2UiLCJhZGRCb3giXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPQyxPQUFQLEdBQWlCLFVBQVNDLEtBQVQsRUFBZ0I7O0FBRWhDLEtBQUlDLFVBQVVELE1BQU1DLE9BQXBCOztBQUVBRCxPQUFNRSxZQUFOLEdBQXFCO0FBQ3BCO0FBQ0E7QUFDQUMsZ0JBQWMsRUFITTtBQUlwQjtBQUNBOztBQUVBO0FBQ0FDLFlBQVUsRUFSVTtBQVNwQkMscUJBQW1CLDJCQUFTQyxJQUFULEVBQWVDLGdCQUFmLEVBQWlDSCxRQUFqQyxFQUEyQztBQUM3RCxRQUFLRCxZQUFMLENBQWtCRyxJQUFsQixJQUEwQkMsZ0JBQTFCO0FBQ0EsUUFBS0gsUUFBTCxDQUFjRSxJQUFkLElBQXNCTCxRQUFRTyxLQUFSLENBQWNKLFFBQWQsQ0FBdEI7QUFDQSxHQVptQjtBQWFwQkssdUJBQXFCLDZCQUFTSCxJQUFULEVBQWU7QUFDbkMsVUFBTyxLQUFLSCxZQUFMLENBQWtCTyxjQUFsQixDQUFpQ0osSUFBakMsSUFBeUMsS0FBS0gsWUFBTCxDQUFrQkcsSUFBbEIsQ0FBekMsR0FBbUVLLFNBQTFFO0FBQ0EsR0FmbUI7QUFnQnBCQyxvQkFBa0IsMEJBQVNOLElBQVQsRUFBZTtBQUNoQztBQUNBLFVBQU8sS0FBS0YsUUFBTCxDQUFjTSxjQUFkLENBQTZCSixJQUE3QixJQUFxQ0wsUUFBUVksVUFBUixDQUFtQmIsTUFBTUksUUFBTixDQUFlVSxLQUFsQyxFQUF5QyxLQUFLVixRQUFMLENBQWNFLElBQWQsQ0FBekMsQ0FBckMsR0FBcUcsRUFBNUc7QUFDQSxHQW5CbUI7QUFvQnBCUyx1QkFBcUIsNkJBQVNULElBQVQsRUFBZVUsU0FBZixFQUEwQjtBQUM5QyxPQUFJWixXQUFXLEtBQUtBLFFBQXBCO0FBQ0EsT0FBSUEsU0FBU00sY0FBVCxDQUF3QkosSUFBeEIsQ0FBSixFQUFtQztBQUNsQ0YsYUFBU0UsSUFBVCxJQUFpQkwsUUFBUWdCLE1BQVIsQ0FBZWIsU0FBU0UsSUFBVCxDQUFmLEVBQStCVSxTQUEvQixDQUFqQjtBQUNBO0FBQ0QsR0F6Qm1CO0FBMEJwQkUscUJBQW1CLDJCQUFTQyxhQUFULEVBQXdCO0FBQzFDO0FBQ0FsQixXQUFRbUIsSUFBUixDQUFhRCxjQUFjRSxNQUEzQixFQUFtQyxVQUFTUCxLQUFULEVBQWdCO0FBQ2xEZCxVQUFNc0IsYUFBTixDQUFvQkMsTUFBcEIsQ0FBMkJKLGFBQTNCLEVBQTBDTCxLQUExQztBQUNBLElBRkQ7QUFHQTtBQS9CbUIsRUFBckI7QUFpQ0EsQ0FyQ0QiLCJmaWxlIjoiY29yZS5zY2FsZVNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENoYXJ0KSB7XHJcblxyXG5cdHZhciBoZWxwZXJzID0gQ2hhcnQuaGVscGVycztcclxuXHJcblx0Q2hhcnQuc2NhbGVTZXJ2aWNlID0ge1xyXG5cdFx0Ly8gU2NhbGUgcmVnaXN0cmF0aW9uIG9iamVjdC4gRXh0ZW5zaW9ucyBjYW4gcmVnaXN0ZXIgbmV3IHNjYWxlIHR5cGVzIChzdWNoIGFzIGxvZyBvciBEQiBzY2FsZXMpIGFuZCB0aGVuXHJcblx0XHQvLyB1c2UgdGhlIG5ldyBjaGFydCBvcHRpb25zIHRvIGdyYWIgdGhlIGNvcnJlY3Qgc2NhbGVcclxuXHRcdGNvbnN0cnVjdG9yczoge30sXHJcblx0XHQvLyBVc2UgYSByZWdpc3RyYXRpb24gZnVuY3Rpb24gc28gdGhhdCB3ZSBjYW4gbW92ZSB0byBhbiBFUzYgbWFwIHdoZW4gd2Ugbm8gbG9uZ2VyIG5lZWQgdG8gc3VwcG9ydFxyXG5cdFx0Ly8gb2xkIGJyb3dzZXJzXHJcblxyXG5cdFx0Ly8gU2NhbGUgY29uZmlnIGRlZmF1bHRzXHJcblx0XHRkZWZhdWx0czoge30sXHJcblx0XHRyZWdpc3RlclNjYWxlVHlwZTogZnVuY3Rpb24odHlwZSwgc2NhbGVDb25zdHJ1Y3RvciwgZGVmYXVsdHMpIHtcclxuXHRcdFx0dGhpcy5jb25zdHJ1Y3RvcnNbdHlwZV0gPSBzY2FsZUNvbnN0cnVjdG9yO1xyXG5cdFx0XHR0aGlzLmRlZmF1bHRzW3R5cGVdID0gaGVscGVycy5jbG9uZShkZWZhdWx0cyk7XHJcblx0XHR9LFxyXG5cdFx0Z2V0U2NhbGVDb25zdHJ1Y3RvcjogZnVuY3Rpb24odHlwZSkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcnMuaGFzT3duUHJvcGVydHkodHlwZSkgPyB0aGlzLmNvbnN0cnVjdG9yc1t0eXBlXSA6IHVuZGVmaW5lZDtcclxuXHRcdH0sXHJcblx0XHRnZXRTY2FsZURlZmF1bHRzOiBmdW5jdGlvbih0eXBlKSB7XHJcblx0XHRcdC8vIFJldHVybiB0aGUgc2NhbGUgZGVmYXVsdHMgbWVyZ2VkIHdpdGggdGhlIGdsb2JhbCBzZXR0aW5ncyBzbyB0aGF0IHdlIGFsd2F5cyB1c2UgdGhlIGxhdGVzdCBvbmVzXHJcblx0XHRcdHJldHVybiB0aGlzLmRlZmF1bHRzLmhhc093blByb3BlcnR5KHR5cGUpID8gaGVscGVycy5zY2FsZU1lcmdlKENoYXJ0LmRlZmF1bHRzLnNjYWxlLCB0aGlzLmRlZmF1bHRzW3R5cGVdKSA6IHt9O1xyXG5cdFx0fSxcclxuXHRcdHVwZGF0ZVNjYWxlRGVmYXVsdHM6IGZ1bmN0aW9uKHR5cGUsIGFkZGl0aW9ucykge1xyXG5cdFx0XHR2YXIgZGVmYXVsdHMgPSB0aGlzLmRlZmF1bHRzO1xyXG5cdFx0XHRpZiAoZGVmYXVsdHMuaGFzT3duUHJvcGVydHkodHlwZSkpIHtcclxuXHRcdFx0XHRkZWZhdWx0c1t0eXBlXSA9IGhlbHBlcnMuZXh0ZW5kKGRlZmF1bHRzW3R5cGVdLCBhZGRpdGlvbnMpO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0YWRkU2NhbGVzVG9MYXlvdXQ6IGZ1bmN0aW9uKGNoYXJ0SW5zdGFuY2UpIHtcclxuXHRcdFx0Ly8gQWRkcyBlYWNoIHNjYWxlIHRvIHRoZSBjaGFydC5ib3hlcyBhcnJheSB0byBiZSBzaXplZCBhY2NvcmRpbmdseVxyXG5cdFx0XHRoZWxwZXJzLmVhY2goY2hhcnRJbnN0YW5jZS5zY2FsZXMsIGZ1bmN0aW9uKHNjYWxlKSB7XHJcblx0XHRcdFx0Q2hhcnQubGF5b3V0U2VydmljZS5hZGRCb3goY2hhcnRJbnN0YW5jZSwgc2NhbGUpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9O1xyXG59O1xyXG4iXX0=