'use strict';

module.exports = function (Chart) {

	var helpers = Chart.helpers;

	Chart.elements = {};

	Chart.Element = function (configuration) {
		helpers.extend(this, configuration);
		this.initialize.apply(this, arguments);
	};

	helpers.extend(Chart.Element.prototype, {

		initialize: function initialize() {
			this.hidden = false;
		},

		pivot: function pivot() {
			var me = this;
			if (!me._view) {
				me._view = helpers.clone(me._model);
			}
			me._start = helpers.clone(me._view);
			return me;
		},

		transition: function transition(ease) {
			var me = this;

			if (!me._view) {
				me._view = helpers.clone(me._model);
			}

			// No animation -> No Transition
			if (ease === 1) {
				me._view = me._model;
				me._start = null;
				return me;
			}

			if (!me._start) {
				me.pivot();
			}

			helpers.each(me._model, function (value, key) {

				if (key[0] === '_') {
					// Only non-underscored properties
					// Init if doesn't exist
				} else if (!me._view.hasOwnProperty(key)) {
					if (typeof value === 'number' && !isNaN(me._view[key])) {
						me._view[key] = value * ease;
					} else {
						me._view[key] = value;
					}
					// No unnecessary computations
				} else if (value === me._view[key]) {
					// It's the same! Woohoo!
					// Color transitions if possible
				} else if (typeof value === 'string') {
					try {
						var color = helpers.color(me._model[key]).mix(helpers.color(me._start[key]), ease);
						me._view[key] = color.rgbString();
					} catch (err) {
						me._view[key] = value;
					}
					// Number transitions
				} else if (typeof value === 'number') {
					var startVal = me._start[key] !== undefined && isNaN(me._start[key]) === false ? me._start[key] : 0;
					me._view[key] = (me._model[key] - startVal) * ease + startVal;
					// Everything else
				} else {
					me._view[key] = value;
				}
			}, me);

			return me;
		},

		tooltipPosition: function tooltipPosition() {
			return {
				x: this._model.x,
				y: this._model.y
			};
		},

		hasValue: function hasValue() {
			return helpers.isNumber(this._model.x) && helpers.isNumber(this._model.y);
		}
	});

	Chart.Element.extend = helpers.inherits;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUuZWxlbWVudC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiQ2hhcnQiLCJoZWxwZXJzIiwiZWxlbWVudHMiLCJFbGVtZW50IiwiY29uZmlndXJhdGlvbiIsImV4dGVuZCIsImluaXRpYWxpemUiLCJhcHBseSIsImFyZ3VtZW50cyIsInByb3RvdHlwZSIsImhpZGRlbiIsInBpdm90IiwibWUiLCJfdmlldyIsImNsb25lIiwiX21vZGVsIiwiX3N0YXJ0IiwidHJhbnNpdGlvbiIsImVhc2UiLCJlYWNoIiwidmFsdWUiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsImlzTmFOIiwiY29sb3IiLCJtaXgiLCJyZ2JTdHJpbmciLCJlcnIiLCJzdGFydFZhbCIsInVuZGVmaW5lZCIsInRvb2x0aXBQb3NpdGlvbiIsIngiLCJ5IiwiaGFzVmFsdWUiLCJpc051bWJlciIsImluaGVyaXRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBT0MsT0FBUCxHQUFpQixVQUFTQyxLQUFULEVBQWdCOztBQUVoQyxLQUFJQyxVQUFVRCxNQUFNQyxPQUFwQjs7QUFFQUQsT0FBTUUsUUFBTixHQUFpQixFQUFqQjs7QUFFQUYsT0FBTUcsT0FBTixHQUFnQixVQUFTQyxhQUFULEVBQXdCO0FBQ3ZDSCxVQUFRSSxNQUFSLENBQWUsSUFBZixFQUFxQkQsYUFBckI7QUFDQSxPQUFLRSxVQUFMLENBQWdCQyxLQUFoQixDQUFzQixJQUF0QixFQUE0QkMsU0FBNUI7QUFDQSxFQUhEOztBQUtBUCxTQUFRSSxNQUFSLENBQWVMLE1BQU1HLE9BQU4sQ0FBY00sU0FBN0IsRUFBd0M7O0FBRXZDSCxjQUFZLHNCQUFXO0FBQ3RCLFFBQUtJLE1BQUwsR0FBYyxLQUFkO0FBQ0EsR0FKc0M7O0FBTXZDQyxTQUFPLGlCQUFXO0FBQ2pCLE9BQUlDLEtBQUssSUFBVDtBQUNBLE9BQUksQ0FBQ0EsR0FBR0MsS0FBUixFQUFlO0FBQ2RELE9BQUdDLEtBQUgsR0FBV1osUUFBUWEsS0FBUixD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LFlBQVUsb0JBQVc7QUFDcEIsVUFBT2hDLFFBQVFpQyxRQUFSLENBQWlCLEtBQUtuQixNQUFMLENBQVlnQixDQUE3QixLQUFtQzlCLFFBQVFpQyxRQUFSLENBQWlCLEtBQUtuQixNQUFMLENBQVlpQixDQUE3QixDQUExQztBQUNBO0FBN0VzQyxFQUF4Qzs7QUFnRkFoQyxPQUFNRyxPQUFOLENBQWNFLE1BQWQsR0FBdUJKLFFBQVFrQyxRQUEvQjtBQUVBLENBN0ZEIiwiZmlsZSI6ImNvcmUuZWxlbWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ2hhcnQpIHtcclxuXHJcblx0dmFyIGhlbHBlcnMgPSBDaGFydC5oZWxwZXJzO1xyXG5cclxuXHRDaGFydC5lbGVtZW50cyA9IHt9O1xyXG5cclxuXHRDaGFydC5FbGVtZW50ID0gZnVuY3Rpb24oY29uZmlndXJhdGlvbikge1xyXG5cdFx0aGVscGVycy5leHRlbmQodGhpcywgY29uZmlndXJhdGlvbik7XHJcblx0XHR0aGlzLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHR9O1xyXG5cclxuXHRoZWxwZXJzLmV4dGVuZChDaGFydC5FbGVtZW50LnByb3RvdHlwZSwge1xyXG5cclxuXHRcdGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR0aGlzLmhpZGRlbiA9IGZhbHNlO1xyXG5cdFx0fSxcclxuXHJcblx0XHRwaXZvdDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBtZSA9IHRoaXM7XHJcblx0XHRcdGlmICghbWUuX3ZpZXcpIHtcclxuXHRcdFx0XHRtZS5fdmlldyA9IGhlbHBlcnMuY2xvbmUobWUuX21vZGVsKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRtZS5fc3RhcnQgPSBoZWxwZXJzLmNsb25lKG1lLl92aWV3KTtcclxuXHRcdFx0cmV0dXJuIG1lO1xyXG5cdFx0fSxcclxuXHJcblx0XHR0cmFuc2l0aW9uOiBmdW5jdGlvbihlYXNlKSB7XHJcblx0XHRcdHZhciBtZSA9IHRoaXM7XHJcblxyXG5cdFx0XHRpZiAoIW1lLl92aWV3KSB7XHJcblx0XHRcdFx0bWUuX3ZpZXcgPSBoZWxwZXJzLmNsb25lKG1lLl9tb2RlbCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE5vIGFuaW1hdGlvbiAtPiBObyBUcmFuc2l0aW9uXHJcblx0XHRcdGlmIChlYXNlID09PSAxKSB7XHJcblx0XHRcdFx0bWUuX3ZpZXcgPSBtZS5fbW9kZWw7XHJcblx0XHRcdFx0bWUuX3N0YXJ0ID0gbnVsbDtcclxuXHRcdFx0XHRyZXR1cm4gbWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICghbWUuX3N0YXJ0KSB7XHJcblx0XHRcdFx0bWUucGl2b3QoKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aGVscGVycy5lYWNoKG1lLl9tb2RlbCwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xyXG5cclxuXHRcdFx0XHRpZiAoa2V5WzBdID09PSAnXycpIHtcclxuXHRcdFx0XHRcdC8vIE9ubHkgbm9uLXVuZGVyc2NvcmVkIHByb3BlcnRpZXNcclxuXHRcdFx0XHQvLyBJbml0IGlmIGRvZXNuJ3QgZXhpc3RcclxuXHRcdFx0XHR9IGVsc2UgaWYgKCFtZS5fdmlldy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiAhaXNOYU4obWUuX3ZpZXdba2V5XSkpIHtcclxuXHRcdFx0XHRcdFx0bWUuX3ZpZXdba2V5XSA9IHZhbHVlICogZWFzZTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdG1lLl92aWV3W2tleV0gPSB2YWx1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHQvLyBObyB1bm5lY2Vzc2FyeSBjb21wdXRhdGlvbnNcclxuXHRcdFx0XHR9IGVsc2UgaWYgKHZhbHVlID09PSBtZS5fdmlld1trZXldKSB7XHJcblx0XHRcdFx0XHQvLyBJdCdzIHRoZSBzYW1lISBXb29ob28hXHJcblx0XHRcdFx0Ly8gQ29sb3IgdHJhbnNpdGlvbnMgaWYgcG9zc2libGVcclxuXHRcdFx0XHR9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuXHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdHZhciBjb2xvciA9IGhlbHBlcnMuY29sb3IobWUuX21vZGVsW2tleV0pLm1peChoZWxwZXJzLmNvbG9yKG1lLl9zdGFydFtrZXldKSwgZWFzZSk7XHJcblx0XHRcdFx0XHRcdG1lLl92aWV3W2tleV0gPSBjb2xvci5yZ2JTdHJpbmcoKTtcclxuXHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xyXG5cdFx0XHRcdFx0XHRtZS5fdmlld1trZXldID0gdmFsdWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0Ly8gTnVtYmVyIHRyYW5zaXRpb25zXHJcblx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XHJcblx0XHRcdFx0XHR2YXIgc3RhcnRWYWwgPSBtZS5fc3RhcnRba2V5XSAhPT0gdW5kZWZpbmVkICYmIGlzTmFOKG1lLl9zdGFydFtrZXldKSA9PT0gZmFsc2UgPyBtZS5fc3RhcnRba2V5XSA6IDA7XHJcblx0XHRcdFx0XHRtZS5fdmlld1trZXldID0gKChtZS5fbW9kZWxba2V5XSAtIHN0YXJ0VmFsKSAqIGVhc2UpICsgc3RhcnRWYWw7XHJcblx0XHRcdFx0Ly8gRXZlcnl0aGluZyBlbHNlXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdG1lLl92aWV3W2tleV0gPSB2YWx1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIG1lKTtcclxuXHJcblx0XHRcdHJldHVybiBtZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0dG9vbHRpcFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHR4OiB0aGlzLl9tb2RlbC54LFxyXG5cdFx0XHRcdHk6IHRoaXMuX21vZGVsLnlcclxuXHRcdFx0fTtcclxuXHRcdH0sXHJcblxyXG5cdFx0aGFzVmFsdWU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gaGVscGVycy5pc051bWJlcih0aGlzLl9tb2RlbC54KSAmJiBoZWxwZXJzLmlzTnVtYmVyKHRoaXMuX21vZGVsLnkpO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG5cclxuXHRDaGFydC5FbGVtZW50LmV4dGVuZCA9IGhlbHBlcnMuaW5oZXJpdHM7XHJcblxyXG59O1xyXG4iXX0=